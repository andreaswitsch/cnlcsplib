//#define GSOLVER_LOG
using System;
using AutoDiff;
using AD=AutoDiff;
using System.IO;
using System.Text;
using Castor;
using System.Collections.Generic;

namespace Alica.Reasoner
{
public class SMTGSolver  {
		
	protected class RpropResult : IComparable<RpropResult> {
		public double[] initialValue;
		public double[] finalValue;
		public double initialUtil;
		public double finalUtil;
		public bool aborted;
		public int CompareTo (RpropResult other) {				
				return (this.finalUtil > other.finalUtil)?-1:1;
		}
		
	}
	public long Runs {get; private set;}
	public long FEvals {get; private set;}
	double initialStepSize = 0.005;
	double utilitySignificanceThreshold = 1E-22;
	Random rand;	
	int dim;
	double[,] limits;
	double[] ranges;
	double[] rpropStepWidth;
	//AD.ICompiledTerm term;
	AD.Variable[] currentArgs;	
	Dictionary<int,AD.Term> currentAtoms;
	int tempClauseGrp;
		
	StreamWriter sw;
		
	static SMTGSolver instance=null;
		
	List<RpropResult> rResults;
	protected static int fcounter =0;	
	//Configuration:
	protected bool seedWithUtilOptimum;
		
	protected FormulaTransform ft;
	protected RpropResult r1=null;
			
	public SMTGSolver () {
		
		this.rand = new Random();
		this.rResults = new List<RpropResult>();
			
		this.seedWithUtilOptimum = true;
		this.ft = new FormulaTransform();
			
		if(instance==null) Minisat.CreateSolver();
			
		instance = this;
	}
	protected void InitLog() {
			
			string logFile = "/tmp/test"+(fcounter++)+".dbg";
			FileStream file = new FileStream(logFile, FileMode.Create);
			this.sw = new StreamWriter(file);				
			sw.AutoFlush = true;
	}
	protected void Log(double util, double[] val) {
			sw.Write(util);
			sw.Write("\t");
			for(int i=0; i <dim; i++) {
				sw.Write(val[i]); sw.Write("\t");
			}
			sw.WriteLine();
			
	}
	protected void LogStep() {
			sw.WriteLine();
			sw.WriteLine();
	}
	protected void CloseLog() {
			if (sw != null) {
				sw.Close();
				sw=null;
			}
	}
	
	public double[] Solve(AD.Term equation, AD.Variable[] args, double[,] limits, out double util) {
			return Solve(equation, args, limits, null, out util);
	}
		                                                                                           
	public double[] Solve(AD.Term equation, AD.Variable[] args, double[,] limits, double[][] seeds, out double util) {			
			//this.FEvals = 0;
			util = 0;
#if (GSOLVER_LOG)			
			InitLog();
#endif		
			ft.Reset();
			rResults.Clear();
			
			currentArgs = args;
			
			this.dim = args.Length;
			this.limits = limits;
			this.ranges = new double[dim];
			this.rpropStepWidth = new double[dim];
			
			for(int i=0; i<dim; i++) {
				this.ranges[i] = (this.limits[i,1]-this.limits[i,0]);
			}
			equation = equation.AggregateConstants();
			
			AD.ConstraintUtility cu = (AD.ConstraintUtility) equation;
			bool utilIsConstant =(cu.Utility is AD.Constant);
			bool constraintIsConstant = (cu.Constraint is AD.Constant);
			if (constraintIsConstant) {
				if(((AD.Constant)cu.Constraint).Value < 0.25) {
					util = ((AD.Constant)cu.Constraint).Value;
					double[] ret = new double[dim];
					for(int i=0; i<dim; i++) {
						ret[i] = this.ranges[i]/2.0+this.limits[i,0];
					}
					return ret;
				}
			}
			//Console.WriteLine(cu.Constraint);
			List<Clause> cnf = ft.TransformToCNF(cu.Constraint);
			
			Console.WriteLine("Atoms: {0}, Occurrence: {1}",ft.Atoms.Count,ft.AtomOccurrence);
			Console.WriteLine("Clauses: {0}",cnf.Count);
			foreach(AD.Term atom in ft.Atoms) {
					Console.WriteLine(atom);	
			}
			
			int litc=1;
			List<AD.Term> terms = new List<AD.Term>(ft.Atoms);
			
			currentAtoms = new Dictionary<int, Term>();
			
			foreach(AD.Term t in terms) {
				foreach(Literal l in ft.References[t]) {
					l.Id = litc;
				}
				currentAtoms.Add(litc,t);
				litc++;
			}
			
			
			unsafe {
				Minisat.setTSolveCallback(CSATCallBack);
			}
			
			foreach(Clause c in cnf) {
				if(!c.IsTautologic) {
					if (c.Literals.Count == 0) {
						util = Double.MinValue;
						double[] ret = new double[dim];
						for(int i=0; i<dim; i++) {
							ret[i] = this.ranges[i]/2.0+this.limits[i,0];
						}
						return ret;
					}
					Minisat.PostClause(c);
				}
			}
			Minisat.SimplifyDB();
			bool solutionFound = Minisat.Solve();
			if(solutionFound) {
				util = r1.finalUtil;
				return r1.finalValue;
			}


			return null;
			
		}
		public unsafe static bool CSATCallBack(int* buf, int len) {
			return instance.SATCallBack(buf, len);
		}
		public unsafe bool SATCallBack(int* buf, int len) {
			Console.Write("SAT proposed({0}): ", len);
			for(int i=0; i<len; i++) {
				Console.Write("{0} ",buf[i]);
			}
			Console.WriteLine();
			
			AD.Term constraint = ConstraintBuilder.True;
			for(int i=0; i<len; i++) {
				if (buf[i] > 0) {
					constraint &= currentAtoms[buf[i]];
				} else {
					constraint &= currentAtoms[-buf[i]].Negate();
				}				
			}
			r1 = RPropFindFeasible(constraint, null);
			if (r1.finalUtil < 0.5) r1 = RPropFindFeasible(constraint,null);
			
			if(r1.finalUtil < 0.5) {
				Console.Write(".");				
				//Console.WriteLine("Could not find point for {0}",constraint);				
				return false;
			}
			return true;	
		}
		
		protected RpropResult RPropFindFeasible(AD.Term constraint,double[] seed) {
			AD.ICompiledTerm term = AD.TermUtils.Compile(constraint,currentArgs);
			InitialStepSize();
	
			double[] curGradient;
			
			RpropResult ret = new RpropResult();
	
			if(seed != null) {
				curGradient = InitialPointFromSeed(term, ret,seed);
			}
			else {			
				curGradient = InitialPoint(term, ret);
			}
			double curUtil = ret.initialUtil;
					
			double[] formerGradient = new double[dim];
			double[] curValue = new double[dim];
			
			Tuple<double[],double> tup;
											
			Buffer.BlockCopy(ret.initialValue,0,curValue,0,sizeof(double)*dim);
			
			
			formerGradient = curGradient;			
			
			
			int itcounter = 0;
			int badcounter = 0;
			
		
			/*Console.WriteLine("Initial Sol:");
			for(int i=0; i<dim;i++) {
				Console.Write("{0} ",curValue[i]);
			}
			Console.WriteLine();
			Console.WriteLine("Initial Util: {0}",curUtil);
			 */
#if (GSOLVER_LOG)			
			Log(curUtil,curValue);
#endif
			
			int maxIter = 60;
			int maxBad = 30;
			double minStep = 1E-11;
			
			while(itcounter++ < maxIter && badcounter < maxBad) {				
					for(int i=0; i<dim; i++) {
						if (curGradient[i] * formerGradient[i] > 0) rpropStepWidth[i] *= 1.3;
						else if (curGradient[i] * formerGradient[i] < 0) rpropStepWidth[i] *= 0.5;
						rpropStepWidth[i] = Math.Max(minStep,rpropStepWidth[i]);					
						if (curGradient[i] > 0) curValue[i] += rpropStepWidth[i];
						else if (curGradient[i] < 0) curValue[i] -= rpropStepWidth[i];
						
						if (curValue[i] > limits[i,1]) curValue[i] = limits[i,1];
						else if (curValue[i] < limits[i,0]) curValue[i] = limits[i,0];						
					}
				//}
				//Console.WriteLine();
				this.FEvals++;
				tup = term.Differentiate(curValue);
				bool allZero = true;
				//Console.WriteLine("Grad: ");
				for(int i=0; i < dim; i++) {
					if (Double.IsNaN(tup.Item1[i])) {
						//Console.Error.WriteLine("NaN in gradient, aborting!");
						ret.aborted=true;
#if (GSOLVER_LOG)									
						LogStep();
#endif						
						return ret;					
					}
					allZero &= (tup.Item1[i]==0);
					//Console.Write("{0}\t",tup.Item1[i]);
				}
				//Console.WriteLine();
				curUtil = tup.Item2;
				formerGradient = curGradient;
				curGradient = tup.Item1;
#if (GSOLVER_LOG)			
				Log(curUtil,curValue);
#endif				
				//Console.WriteLine("CurUtil: {0} Final {1}",curUtil,ret.finalUtil);
				
				if (curUtil > ret.finalUtil) {
					badcounter = 0;//Math.Max(0,badcounter-1);
					
					//if (curUtil-ret.finalUtil < 0.00000000000001) {
						//Console.WriteLine("not better");
					//	badcounter++;
					//} else {
					//badcounter = 0;
					//}
				
					ret.finalUtil = curUtil;
					Buffer.BlockCopy(curValue,0,ret.finalValue,0,sizeof(double)*dim);
					//ret.finalValue = curValue;
					if (curUtil > 0.75) return ret;
					
				} else {
						//if (curUtil < ret.finalUtil || curUtil > 0) badcounter++;
						badcounter++;
				}
				if (allZero) {
					//Console.WriteLine("All Zero!");
					/*Console.WriteLine("Util {0}",curUtil);
					Console.Write("Vals: ");
					for(int i=0; i < dim; i++) {
						Console.Write("{0}\t",curValue[i]);
					}
					Console.WriteLine();*/
					ret.aborted = false;
#if (GSOLVER_LOG)									
					LogStep();
#endif			
					return ret;
				}

			}
#if (GSOLVER_LOG)									
			LogStep();
#endif			
			ret.aborted = false;
			return ret;
			
		}
		protected double[] InitialPoint(ICompiledTerm term,RpropResult res) {
			Tuple<double[],double> tup;
			bool found = true;
			res.initialValue = new double[dim];
			res.finalValue = new double[dim];
			do {
				for(int i=0; i<dim; i++) {
					//double range = limits[i,1]-limits[i,0];					
					res.initialValue[i] = rand.NextDouble()*ranges[i]+limits[i,0];
				}
				this.FEvals++;
				tup = term.Differentiate(res.initialValue);
				for(int i=0; i<dim; i++) {
					if (Double.IsNaN(tup.Item1[i])) {
						//Console.WriteLine("NaN in Gradient, retrying");
						found = false;
						break;
					} else found = true;
				}
				
			} while(!found);
			res.initialUtil = tup.Item2;
			res.finalUtil = tup.Item2;
			
			Buffer.BlockCopy(res.initialValue,0,res.finalValue,0,sizeof(double)*dim);
			
			return tup.Item1;
		}
		protected double[] InitialPointFromSeed(ICompiledTerm term, RpropResult res, double[] seed) {
			Tuple<double[],double> tup;
			
			res.initialValue = new double[dim];
			res.finalValue = new double[dim];		
			for(int i=0; i<dim; i++) {
				if (Double.IsNaN(seed[i])) {
					res.initialValue[i] = rand.NextDouble()*ranges[i]+limits[i,0];
				} else {
					res.initialValue[i] = Math.Min(Math.Max(seed[i],limits[i,0]),limits[i,1]);
				}
			}
			tup = term.Differentiate(res.initialValue);
			res.initialUtil = tup.Item2;
			res.finalUtil = tup.Item2;
			
			Buffer.BlockCopy(res.initialValue,0,res.finalValue,0,sizeof(double)*dim);
			
			return tup.Item1;
		}
		protected void InitialStepSize() {
			for(int i=0; i<this.dim; i++) {					
					this.rpropStepWidth[i] = initialStepSize*ranges[i];			
			}
		}
	}

}

